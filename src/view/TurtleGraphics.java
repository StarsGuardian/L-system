package view;

import java.util.Stack;

import javafx.scene.canvas.GraphicsContext;

/**
 * This TurtleGraphics class does the actual drawing. This class takes the final string which
 * generated by model class and read through the final string drawing image according to the rules
 * @author ianfang
 *
 */
public class TurtleGraphics {
	private String finalStr;
	private String chara1;
	private String chara2;
	private GraphicsContext draws;
	private double x;
	private double y;
	private double angle;
	private double exeangle = 0;
	private Stack <Object> stack = new Stack<Object>();
	private double x1;
	private double y1;
	
	/**
	 * This is the constructor
	 * @param gc  this is the GraphicsContext instance
	 */
	public TurtleGraphics(GraphicsContext gc) {
		draws = gc;
	}
	
	/**
	 * This method read through the final string, draws lines and update the x and y coordinates according to the rules
	 * This method also does push and pop operations if save and restore are required by the string
	 */
	public void drawing() {
		System.out.println(finalStr);
		for (int i = 0; i < finalStr.length(); i++) {
			char c = finalStr.charAt(i);
			if (c == chara1.charAt(0) || c == chara2.charAt(0)) {
				if ((exeangle >= 0 && exeangle < 90) || (exeangle <= -270 && exeangle > -360)) {
					x1 = x - (Math.abs(15*Math.sin(Math.toRadians(exeangle))));
					y1 = y - (Math.abs(15*Math.cos(Math.toRadians(exeangle))));
					draws.strokeLine(x, y, x1, y1);
					x = x1;
					y = y1;

				}
				else if ((exeangle >= 90 && exeangle < 180) || (exeangle <= -180 && exeangle > -270)) {
					x1 = x - (Math.abs(15*Math.sin(Math.toRadians(exeangle))));
					y1 = y + (Math.abs(15*Math.cos(Math.toRadians(exeangle))));
					draws.strokeLine(x, y, x1, y1);
					x = x1;
					y = y1;
				}
				
				else if ((exeangle >= 180 && exeangle < 270) || (exeangle <= -90 && exeangle > -180)) {
					x1 = x + (Math.abs(15*Math.sin(Math.toRadians(exeangle))));
					y1 = y + (Math.abs(15*Math.cos(Math.toRadians(exeangle))));
					draws.strokeLine(x, y, x1, y1);
					x = x1;
					y = y1;
				}
				
				else if ((exeangle >= 270 && exeangle < 360) || (exeangle <= 0 && exeangle > -90)) {
					x1 = x + (Math.abs(15*Math.sin(Math.toRadians(exeangle))));
					y1 = y - (Math.abs(15*Math.cos(Math.toRadians(exeangle))));
					draws.strokeLine(x, y, x1, y1);
					x = x1;
					y = y1;
				}
			}
			//Rotate right
			else if (c == '+') {
				exeangle += angle;
				if (exeangle >= 360) {
					exeangle = exeangle - 360;
				}
			}
			//Rotate left
			else if (c == '-') {
				exeangle -= angle;
				if (exeangle <= -360) {
					exeangle = 360 + exeangle;
				}
			}
			//Save current state(angle, x, y) to the stack
			else if (c == '[') {
				stack.push(x);
				stack.push(y);
				stack.push(angle);
				stack.push(exeangle);
			}
			//restore the data saved on the stack
			else if (c == ']') {
				if (!stack.isEmpty()) {
					exeangle = (double)stack.pop();
					angle = (double)stack.pop();
					y = (double) stack.pop();
					x = (double) stack.pop();
				}
			}
		}
	}
	
	/**
	 * This method clears canvas and prepare turtle to draw new image
	 */
	public void clear() {
		draws.clearRect(0, 0, 5000, 5000);
	}
	
	/**
	 * This method update the final string if user made any changes in view
	 * @param s this is the final string generated by model
	 * @return finalStr which is the final string generated by model
	 */
	public String updateFianlStr(String s) {
		finalStr = s;
		return finalStr;
	}
	
	/**
	 * This method update the angle and reset exeangle if user made any
	 * changes in view
	 * @param angle2 this is the angle user entered
	 * @return angle which is the angle user entered
	 */
	public double updateangle(double angle2) {
		angle = angle2;
		exeangle = 0;
		return angle;
	}
	
	/**
	 * This method update the starting x coordinate if user made any changes
	 * in view
	 * @param x2 which is the x coordinate that user entered
	 * @return x this is the new x coordinate
	 */
	public double updateX(double x2) {
		x = x2;
		return x;
	}
	
	/**
	 * This method update the starting y coordinate if user made any changes
	 * in view
	 * @param y2 which is the y coordinate that user entered
	 * @return y this is the new y coordinate
	 */
	public double updateY(double y2) {
		y = y2;
		return y;
	}
	
	/**
	 * This method update the character of L-system to the drawing method if
	 * user changes the character for L-system
	 * @param update1 which is the new character user entered
	 * @return chara1 this is the new character
	 */
	public String updateChara1(String update1) {
		chara1 = update1;
		return chara1;
	}
	
	/**
	 * This method update the character of L-system to the drawing method if
	 * user changes the character for L-system
	 * @param update2 which is the new character user entered
	 * @return chara2 this is the new character
	 */
	public String updateChara2(String update2) {
		chara2 = update2;
		return chara2;
	}
}
